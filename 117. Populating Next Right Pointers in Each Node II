/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(root==NULL)
        return NULL;
       queue<Node*>q;
       q.push(root);
       vector<vector<Node*>>lev;
       while(!q.empty()){
           vector<Node*>tmp;
           int size=q.size();
           while(size--){
               Node *node=q.front();
               q.pop();
               tmp.push_back(node);
               if(node->left)
               q.push(node->left);
               if(node->right)
               q.push(node->right);
           }
           tmp.push_back(NULL);
           lev.push_back(tmp);
       }
       for(int  i=0;i<lev.size();i++){
           for(int j=0;j<lev[i].size()-1;j++)
           lev[i][j]->next=lev[i][j+1];
       }
       return root;
        
    }
};
